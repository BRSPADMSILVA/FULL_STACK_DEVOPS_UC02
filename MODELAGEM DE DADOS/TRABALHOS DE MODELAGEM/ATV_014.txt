

-- Criar tabela Aluno
CREATE TABLE Aluno (
    RA INT PRIMARY KEY,
    nome VARCHAR(50),
    nascimento DATE
);

-- Inserir dados na tabela Aluno
INSERT INTO Aluno (RA, nome, nascimento) VALUES
(123456, 'Ana', '2000-05-15'),
(234567, 'Carla', '1999-08-20'),
(345678, 'João', '2001-03-10');

-- Criar tabela Curso
CREATE TABLE Curso (
    codigo INT PRIMARY KEY,
    nome VARCHAR(50),
    carga_horaria INT,
    data_inicio DATE,
    data_termino DATE
);

-- Inserir dados na tabela Curso
INSERT INTO Curso (codigo, nome, carga_horaria, data_inicio, data_termino) VALUES
(1, 'Matemática', 60, '2024-02-01', '2024-05-01'),
(2, 'Física', 60, '2024-03-01', '2024-06-01'),
(3, 'Química', 60, '2024-04-01', '2024-07-01'),
(4, 'História', 60, '2024-05-01', '2024-08-01');

-- Criar tabela Matricula
CREATE TABLE Matricula (
    RA INT,
    codigo_curso INT,
    valor_pago DECIMAL(10,2),
    data_matricula DATE,
    FOREIGN KEY (RA) REFERENCES Aluno(RA),
    FOREIGN KEY (codigo_curso) REFERENCES Curso(codigo)
);

-- Inserir dados na tabela Matricula
INSERT INTO Matricula (RA, codigo_curso, valor_pago, data_matricula) VALUES
(123456, 1, 500.00, '2024-01-15'),
(234567, 2, 600.00, '2024-01-20'),
(345678, 3, 700.00, '2024-01-25');

-- 1. Listar RA, nome do aluno e nome do curso em que o aluno está matriculado.
SELECT a.RA, a.nome AS 'Nome Aluno', c.nome AS 'Nome Curso'
FROM Aluno a
INNER JOIN Matricula m ON a.RA = m.RA
INNER JOIN Curso c ON m.codigo_curso = c.codigo;

-- 2. Listar RA, nome do aluno e nome do curso em que o aluno está matriculado, ordenado por nome do curso.
SELECT a.RA, a.nome AS 'Nome Aluno', c.nome AS 'Nome Curso'
FROM Aluno a
INNER JOIN Matricula m ON a.RA = m.RA
INNER JOIN Curso c ON m.codigo_curso = c.codigo
ORDER BY c.nome;

-- 3. Exibir o nome de cada curso que teve matriculas e quantos alunos tem matriculados em cada um deles
SELECT c.nome AS 'Nome Curso', COUNT(m.RA) AS 'Quantidade de Alunos'
FROM Curso c
LEFT JOIN Matricula m ON c.codigo = m.codigo_curso
GROUP BY c.nome;

-- 4. Exibir o nome de todos os cursos e quantos alunos tem matriculados em cada um
SELECT c.nome AS 'Nome Curso', COUNT(m.RA) AS 'Quantidade de Alunos'
FROM Curso c
LEFT JOIN Matricula m ON c.codigo = m.codigo_curso
GROUP BY c.nome
UNION
SELECT nome, 0
FROM Curso
WHERE codigo NOT IN (SELECT DISTINCT codigo_curso FROM Matricula);

-- 5. Exibir o nome do curso e o valor total recebido das matrículas em cada um deles
SELECT c.nome AS 'Nome Curso', SUM(m.valor_pago) AS 'Valor Total Recebido'
FROM Curso c
LEFT JOIN Matricula m ON c.codigo = m.codigo_curso
GROUP BY c.nome;

-- 6. Exibir o nome do curso, o valor total recebido das matrículas em cada um deles e o total arrecadado em matrículas pela escola
SELECT c.nome AS 'Nome Curso', SUM(m.valor_pago) AS 'Valor Total Recebido',
       (SELECT SUM(valor_pago) FROM Matricula) AS 'Total Arrecadado'
FROM Curso c
LEFT JOIN Matricula m ON c.codigo = m.codigo_curso
GROUP BY c.nome;

-- 7. Exibir o valor médio pago em matrícula na escola
SELECT AVG(valor_pago) AS 'Valor Médio Pago'
FROM Matricula;

-- 8. Exibir o nome e o valor médio de matrícula de cada curso
SELECT c.nome AS 'Nome Curso', AVG(m.valor_pago) AS 'Valor Médio de Matrícula'
FROM Curso c
LEFT JOIN Matricula m ON c.codigo = m.codigo_curso
GROUP BY c.nome;

-- 9. Exibir nome dos cursos que não são VIP (ou seja que tenha pelo menos 2 alunos) e a quantidade de alunos matriculados em cada um deles
SELECT c.nome AS 'Nome Curso', COUNT(m.RA) AS 'Quantidade de Alunos'
FROM Curso c
INNER JOIN Matricula m ON c.codigo = m.codigo_curso
GROUP BY c.nome
HAVING COUNT(m.RA) >= 2;

-- 10. Exiba o nome dos cursos com mesma carga horária do curso de auto cad
SELECT c.nome AS 'Nome Curso'
FROM Curso c
INNER JOIN Curso auto_cad ON c.carga_horaria = auto_cad.carga_horaria
WHERE auto_cad.nome = 'Auto Cad' AND c.nome != 'Auto Cad';

-- 11. Exiba nome de todos os alunos que fazem aniversário no mesmo mês que Ana
SELECT nome
FROM Aluno
WHERE MONTH(nascimento) = MONTH((SELECT nascimento FROM Aluno WHERE nome = 'Ana'));

-- 12. Exiba todos os cursos com início em janeiro de 2008 que tenham alunos matriculados
SELECT c.nome AS 'Nome Curso'
FROM Curso c
INNER JOIN Matricula m ON c.codigo = m.codigo_curso
WHERE YEAR(data_inicio) = 2008 AND MONTH(data_inicio) = 1;

-- 13. Exiba todos os cursos com início em janeiro de 2008 independente de ter alunos matriculados ou não
SELECT nome AS 'Nome Curso'
FROM Curso
WHERE YEAR(data_inicio) = 2008 AND MONTH(data_inicio) = 1;

-- 14. Exiba o nome do aluno e do curso de todos os alunos que fizeram matrícula antes da data de início do curso no qual se matriculou
SELECT a.nome AS 'Nome Aluno', c.nome AS 'Nome Curso'
FROM Aluno a
INNER JOIN Matricula m ON a.RA = m.RA
INNER JOIN Curso c ON m.codigo_curso = c.codigo
WHERE m.data_matricula < c.data_inicio;

-- 15. Listar os cursos que ainda não iniciaram
SELECT nome AS 'Nome Curso'
FROM Curso
WHERE data_inicio > CURDATE();

-- 16. Listar os alunos que fizeram matrícula de Sábado
SELECT a.nome AS 'Nome Aluno'
FROM Aluno a
INNER JOIN Matricula m ON a.RA = m.RA
WHERE DAYNAME(m.data_matricula) = 'Saturday';

-- 17. Exibir o nome do aluno e o valor a restituir para os alunos que fizeram matrícula de Sábado
SELECT a.nome AS 'Nome Aluno', FORMAT(m.valor_pago * 0.5, 2) AS 'Valor a Restituir'
FROM Aluno a
INNER JOIN Matricula m ON a.RA = m.RA
WHERE DAYNAME(m.data_matricula) = 'Saturday';

-- 18. Exibir o nome e a idade dos alunos
SELECT nome AS 'Nome Aluno', TIMESTAMPDIFF(YEAR, nascimento, CURDATE()) AS 'Idade'
FROM Aluno;

-- 19. Listar o nome dos cursos e a duração em meses de cada um
SELECT nome AS 'Nome Curso', PERIOD_DIFF(DATE_FORMAT(data_termino,'%Y%m'), DATE_FORMAT(data_inicio,'%Y%m')) AS 'Duração (meses)'
FROM Curso;